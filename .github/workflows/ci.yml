name: CI

on:
  push:
    branches: [ "**" ]
    tags: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  deps:
    name: Download dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
          cache-dependency-path: golang/go.sum
      - name: Download deps
        run: cd golang && make deps

  fmt:
    name: Format check
    runs-on: ubuntu-latest
    needs: deps
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
          cache-dependency-path: golang/go.sum
      - name: Run go fmt
        run: cd golang && make fmt && git diff --exit-code || (echo "Code is not properly formatted. Please run 'make fmt' and commit the changes." && git diff && exit 1)

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: fmt
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
          cache-dependency-path: golang/go.sum
      - name: Install tools
        run: |
          cd golang
          go mod download
          go mod tidy
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          working-directory: golang
          args: --config .golangci.yml --verbose

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [fmt, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
          cache-dependency-path: golang/go.sum
      - name: Run tests
        run: cd golang && make test

  build:
    name: Build (all platforms)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'
          cache-dependency-path: golang/go.sum
      - name: Build all
        run: |
          cd golang
          make build-all
          echo "BUILD_VERSION=${GITHUB_REF_NAME}" >> build.env
          echo "BUILD_COMMIT=${GITHUB_SHA}" >> build.env
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build.env
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gudcommit-binaries
          path: |
            golang/bin/*
            golang/build.env
          if-no-files-found: error
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: gudcommit-binaries
          path: dist
      - name: List downloaded artifacts
        run: |
          echo "Listing dist contents:"
          ls -la dist || true
          echo "Listing dist/golang/bin:"
          ls -la dist/golang/bin || true
      - name: Compute release metadata
        id: meta
        shell: bash
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_OUTPUT"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            GudCommit Tools Release ${{ github.ref_name }}

            Binaries Available:
            - gudcommit: Git commit message generator
            - gudchangelog: Changelog generator

            Supported Platforms:
            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64, arm64)

            Build Info:
            - Commit: ${{ github.sha }}
            - Build Date: ${{ steps.meta.outputs.date }}
            - Branch: ${{ github.ref_name }}
          files: |
            dist/golang/bin/*
            dist/golang/build.env

